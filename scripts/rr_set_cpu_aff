#!/usr/bin/python3

import subprocess
import os

CPU_CORES = os.cpu_count() - 1

def run_bash_command(command):
    try:
        # Run the command
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        # Return the standard output and standard error
        return result.stdout, result.stderr
    except subprocess.CalledProcessError as e:
        # Handle errors in the subprocess
        return e.stdout, e.stderr

# Example usage:
command = """gdb -batch -ex "info thread" -ex "quit" -p $(pgrep qemu) | grep ioctl | awk '{print $5}'"""  # Replace with any bash command
stdout, stderr = run_bash_command(command)

print("Standard Output:")
print(stdout)

if stderr:
    print("Standard Error:")
    print(stderr)

pids = []

for line in stdout.split("\n"):
    pids.append(line[:-1])

print("pids: {}".format(pids))


cpu_id = CPU_CORES

while cpu_id >= 0 and pids:
    pid = pids.pop(0)
    if not pid:
        continue
    stdout, stderr = run_bash_command("taskset -cp {} {}".format(cpu_id, pid))
    cpu_id-=1

    print(stdout)

    if stderr:
        print("Failed: {}".format(stderr))
        break


